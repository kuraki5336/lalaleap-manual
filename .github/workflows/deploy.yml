# 檔案名稱：.github/workflows/deploy.yml

name: Deploy VitePress to GitHub Pages

on:
  # 當有程式碼推送到 `main` 分支時，自動觸發此流程
  push:
    branches: [main] # 如果你的主要分支是 master，請改成 [master]
  
  # 讓你可以在 GitHub Actions 頁面上手動觸發此流程
  workflow_dispatch:

# 設定工作流程的權限，允許部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # 建置工作 (Build Job)
  build:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 虛擬機來執行
    steps:
      # 第一步：取得你的程式碼
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 取得所有 git 歷史，VitePress 的 lastUpdated 功能需要

      # 第二步：設定 pnpm (VitePress 官方推薦)
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8 # 指定 pnpm 版本

      # 第三步：設定 Node.js 環境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18 # 建議使用 Node.js 18 或更高版本
          cache: 'pnpm' # 為 pnpm 設定快取，加速安裝

      # 第四步：安裝專案依賴
      - name: Install dependencies
        run: pnpm install

      # 第五步：執行 VitePress 的建置指令
      - name: Build with VitePress
        run: pnpm run docs:build # 這個指令來自你的 package.json

      # 第六步：打包建置好的網站檔案，準備給下一個 job 使用
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 指定要打包的資料夾路徑
          path: docs/.vitepress/dist

  # 部署工作 (Deploy Job)
  deploy:
    needs: build # 這個 job 必須在 `build` job 成功後才能執行
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 將部署的網址輸出
    steps:
      # 最後一步：將打包好的檔案部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4