# 檔案名稱: .github/workflows/deploy.yml
# 這是修正後的完整版本

name: Deploy VitePress to GitHub Pages

on:
  # 當有程式碼推送到 `main` 分支時，自動觸發此流程
  push:
    branches: [main]
  
  # 讓你可以手動觸發
  workflow_dispatch:

# 設定工作流程的權限
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # --- 建置工作 (Build Job) ---
  build:
    runs-on: ubuntu-latest
    
    steps:
      # 步驟 1: 取得你的程式碼
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # 取得所有 git 歷史，VitePress 的 lastUpdated 功能需要
          fetch-depth: 0

      # 步驟 2: 設定 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      # 步驟 3: 設定 Node.js 環境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18 # 建議使用 Node.js 18 或更高版本
          cache: 'pnpm'

      # 步驟 4: 安裝專案依賴
      # 這個步驟會自動在專案根目錄尋找 pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install

      # 步驟 5: 執行 VitePress 的建置指令
      - name: Build with VitePress
        run: pnpm run docs:build

      # 步驟 6: 打包建置好的網站檔案
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # 指定 VitePress 產生的靜態檔案資料夾
          path: docs/.vitepress/dist

  # --- 部署工作 (Deploy Job) ---
  deploy:
    # 這個 job 必須在 `build` job 成功後才能執行
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      # 最後一步: 將打包好的檔案部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4